!function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}([function(e,n,r){"use strict";window.addEventListener("load",e=>{const n=document.createElement("canvas");n.width=512,n.height=512,n.style.border="solid",document.body.appendChild(n);const t=n.getContext("webgl2");t.enable(t.CULL_FACE);const o=[[1,1],[-1,1],[1,-1],[-1,-1]],i=new Float32Array([].concat(...o)),a=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,a),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null);const c=[[0,1,2],[3,2,1]],l=new Uint16Array([].concat(...c)),f=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,f),t.bufferData(t.ELEMENT_ARRAY_BUFFER,l,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null);const u=new Float32Array([n.width,n.height,0,0]),d=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,d),t.bufferData(t.UNIFORM_BUFFER,u,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null);const R=new Uint32Array([0,0,0,0]),F=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,F),t.bufferData(t.UNIFORM_BUFFER,R,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null);const s=t.createVertexArray(),E=(e,n)=>{const r=t.createShader(n);return t.shaderSource(r,e),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)||console.log(e,t.getShaderInfoLog(r)),r};(()=>Promise.all([E(r(1).default,t.VERTEX_SHADER),E(r(2).default,t.FRAGMENT_SHADER)]).then(e=>{const n=t.createProgram();return e.forEach(e=>t.attachShader(n,e)),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS)||console.log(t.getProgramInfoLog(n)),n}))().then(e=>((e=>{t.bindVertexArray(s),t.bindBuffer(t.ARRAY_BUFFER,a),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,f);const n=t.getAttribLocation(e,"vert2d"),r=t.FLOAT,i=o[0].length,c=i*Float32Array.BYTES_PER_ELEMENT;t.enableVertexAttribArray(n),t.vertexAttribPointer(n,i,r,!1,c,0),t.bindVertexArray(null)})(e),e)).then(e=>{!function n(r){requestAnimationFrame(()=>{((e,n)=>{R[0]=n,t.bindBuffer(t.UNIFORM_BUFFER,F),t.bufferData(t.UNIFORM_BUFFER,R,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null);let r=0;const o=t.getUniformBlockIndex(e,"Screen");t.uniformBlockBinding(e,o,++r),t.bindBufferBase(t.UNIFORM_BUFFER,r,d);const i=t.getUniformBlockIndex(e,"Timer");t.uniformBlockBinding(e,i,++r),t.bindBufferBase(t.UNIFORM_BUFFER,r,F),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.useProgram(e),t.bindVertexArray(s);const a=0*c[0].length;t.drawElements(t.TRIANGLES,l.length,t.UNSIGNED_SHORT,a);const f=t.getError();f!==t.NO_ERROR&&console.log(f),t.bindVertexArray(null),t.useProgram(null)})(e,r),setTimeout(n,30,r+1&2147483647)})}(0)})},!1)},function(e,n,r){"use strict";r.r(n),n.default="#version 300 es\n\ninvariant gl_Position;\nin vec2 vert2d;\n\nvoid main(void) {\n  gl_Position = vec4(vert2d, 0, 1);\n}\n"},function(e,n,r){"use strict";r.r(n),n.default="#version 300 es\n\nprecision highp float;\n\n//invariant gl_FragCoord;\nuniform Screen {\n  vec2 wh;\n} screen;\nuniform Timer {\n  int count;\n} timer;\nout vec4 fragColor;\n\nvec4 colorSpace(vec2 coord)\n{\n  float other = 1.0 - (coord.x + coord.y) / 2.0;\n  return vec4(coord, other, 1.0);\n}\n\n// mandelbrot with animation\nvec4 mandel(vec2 coord)\n{\n  vec2 c = 3.0 * (coord - vec2(2.0 / 3.0, 0.5));\n  vec2 z = c;\n  const float pi = acos(-1.0);\n  int limit = int(20.0 * pow(sin(2.0 * pi * float(timer.count) / 256.0), 2.0));\n  float color = 0.0;\n  for (int i = 0; i < limit; i++) {\n    vec2 z1 = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y);\n    if (dot(z1, z1) > 4.0) {\n      color = float(i) / float(limit);\n      break;\n    } else {\n      z = z1;\n    }\n  }\n  return vec4(color, 0.0, 0.0, 1.0);\n}\n\nvoid main(void)\n{\n  vec2 coord = gl_FragCoord.xy / screen.wh;\n  //fragColor = colorSpace(coord);\n  fragColor = mandel(coord);\n  //fragColor = clamp(mandel(coord) + colorSpace(coord), vec4(0.0), vec4(1.0));\n}\n"}]);