!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=10)}([function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\n\ninvariant gl_Position;\nin vec2 vert2d;\n\nvoid main(void) { gl_Position = vec4(vert2d, 0, 1); }\n"},function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision mediump sampler3D;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord);\n\nout vec4 outColor;\nvoid main(void) {\n    vec4 c;\n    mainImage(c, gl_FragCoord.xy);\n    outColor = c;\n}\n\n// consts\nconst float PI = 3.14159265359;\nconst float TAU = 6.28318530718;\nconst float PIH = 1.57079632679;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nuniform vec3 iResolution;\nuniform float iTime;\nuniform sampler2D iPrevPass;\n\nvec3 tap4(sampler2D tex, vec2 uv, vec2 texelSize) {\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    vec3 s;\n    s = texture(tex, uv + d.xy).rgb;\n    s += texture(tex, uv + d.zy).rgb;\n    s += texture(tex, uv + d.xw).rgb;\n    s += texture(tex, uv + d.zw).rgb;\n\n    return s * (1.0 / 4.0);\n}\n\n#define BPM 140.0\n#define beat (iTime * BPM / 60.0)\n"},function(n,e,t){"use strict";t.r(e),e.default="// debug uniforms\nuniform float gCameraEyeX;     // 0 -100 100\nuniform float gCameraEyeY;     // 2.8 -100 100\nuniform float gCameraEyeZ;     // -8 -100 100\nuniform float gCameraTargetX;  // 0 -100 100\nuniform float gCameraTargetY;  // 2.75 -100 100\nuniform float gCameraTargetZ;  // 0 -100 100\nuniform float gCameraFov;      // 13 0 180\n\nuniform float gMandelboxScale;     // 2.7 1 5\nuniform float gMandelboxRepeat;    // 10 1 100\nuniform float gSceneEps;           // 0.001 0.00001 0.01\nuniform float gEdgeEps;            // 0.0005 0.0001 0.01\nuniform float gEdgePower;          // 1 0.1 10\nuniform float gBaseColor;          // 0.5\nuniform float gRoughness;          // 0.1\nuniform float gMetallic;           // 0.4\nuniform float gEmissiveIntensity;  // 6.0 0 20\n\n// consts\nconst float INF = 1e+10;\nconst float EPS = 0.01;\nconst float OFFSET = EPS * 10.0;\nconst float GROUND_BASE = 0.0;\n\n// ray\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\n// camera\nstruct Camera {\n    vec3 eye, target;\n    vec3 forward, right, up;\n};\n\nRay cameraShootRay(Camera c, vec2 uv) {\n    c.forward = normalize(c.target - c.eye);\n    c.right = normalize(cross(c.forward, c.up));\n    c.up = normalize(cross(c.right, c.forward));\n\n    Ray r;\n    r.origin = c.eye;\n    r.direction = normalize(uv.x * c.right + uv.y * c.up + c.forward / tan(gCameraFov / 360.0 * PI));\n\n    return r;\n}\n\n// intersection\nstruct Intersection {\n    bool hit;\n    vec3 position;\n    float distance;\n    vec3 normal;\n    vec2 uv;\n    float count;\n\n    vec3 baseColor;\n    float roughness;\n    float reflectance;\n    float metallic;\n    vec3 emission;\n\n    bool transparent;\n    float refractiveIndex;\n\n    vec3 color;\n};\n\n// util\n\n#define calcNormal(p, dFunc, eps)                                                                                                                                                 \\\n    normalize(vec2(eps, -eps).xyy *dFunc(p + vec2(eps, -eps).xyy) + vec2(eps, -eps).yyx * dFunc(p + vec2(eps, -eps).yyx) + vec2(eps, -eps).yxy * dFunc(p + vec2(eps, -eps).yxy) + \\\n              vec2(eps, -eps).xxx * dFunc(p + vec2(eps, -eps).xxx))\n\n// Distance Functions\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat dSphere(vec3 p, float r) { return length(p) - r; }\n\nmat2 rotate(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat dMenger(vec3 z0, vec3 offset, float scale) {\n    vec4 z = vec4(z0, 1.0);\n    for (int n = 0; n < 5; n++) {\n        z = abs(z);\n\n        if (z.x < z.y) z.xy = z.yx;\n        if (z.x < z.z) z.xz = z.zx;\n        if (z.y < z.z) z.yz = z.zy;\n\n        z *= scale;\n        z.xyz -= offset * (scale - 1.0);\n\n        if (z.z < -0.5 * offset.z * (scale - 1.0)) {\n            z.z += offset.z * (scale - 1.0);\n        }\n    }\n    return length(max(abs(z.xyz) - vec3(1.0), 0.0)) / z.w;\n}\n\nfloat dMandelFast(vec3 p, float scale, int n) {\n    vec4 q0 = vec4(p, 1.0);\n    vec4 q = q0;\n\n    for (int i = 0; i < n; i++) {\n        // q.xz = mul(rotate(_MandelRotateXZ), q.xz);\n        q.xyz = clamp(q.xyz, -1.0, 1.0) * 2.0 - q.xyz;\n        q = q * scale / clamp(dot(q.xyz, q.xyz), 0.3, 1.0) + q0;\n    }\n\n    return length(q.xyz) / abs(q.w);\n}\n\nvec2 foldRotate(vec2 p, float s) {\n    float a = PI / s - atan(p.x, p.y);\n    float n = TAU / s;\n    a = floor(a / n) * n;\n    p = rotate(a) * p;\n    return p;\n}\n\nfloat dStage(vec3 p) { return dMandelFast(p, gMandelboxScale, int(gMandelboxRepeat)); }\n\nuniform float gDistortion;      // 0.01 0 0.1\nuniform float gDistortionFreq;  // 30 0 100\nfloat dBall(vec3 p) { return dSphere(p - vec3(0, 0, -10), 0.1) - gDistortion * sin(gDistortionFreq * p.x + beat) * sin(gDistortionFreq * p.y + beat) * sin(gDistortionFreq * p.z + beat); }\n\nvec3 opRep(vec3 p, vec3 c) { return mod(p, c) - 0.5 * c; }\n\nfloat map(vec3 p) {\n    float d = dStage(p);\n    d = min(d, dBall(p));\n    return d;\n}\n\n// color functions\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, saturate(p - K.xxx), c.y);\n}\n\n// https://www.shadertoy.com/view/lttGDn\nfloat calcEdge(vec3 p) {\n    float edge = 0.0;\n    vec2 e = vec2(gEdgeEps, 0);\n\n    // Take some distance function measurements from either side of the hit\n    // point on all three axes.\n    float d1 = map(p + e.xyy), d2 = map(p - e.xyy);\n    float d3 = map(p + e.yxy), d4 = map(p - e.yxy);\n    float d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n    float d = map(p) * 2.;  // The hit point itself - Doubled to cut down on\n                            // calculations. See below.\n\n    // Edges - Take a geometry measurement from either side of the hit point.\n    // Average them, then see how much the value differs from the hit point\n    // itself. Do this for X, Y and Z directions. Here, the sum is used for the\n    // overall difference, but there are other ways. Note that it's mainly sharp\n    // surface curves that register a discernible difference.\n    edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n    // edge = max(max(abs(d1 + d2 - d), abs(d3 + d4 - d)), abs(d5 + d6 - d)); //\n    // Etc.\n\n    // Once you have an edge value, it needs to normalized, and smoothed if\n    // possible. How you do that is up to you. This is what I came up with for\n    // now, but I might tweak it later.\n    edge = smoothstep(0., 1., sqrt(edge / e.x * 2.));\n\n    // Return the normal.\n    // Standard, normalized gradient mearsurement.\n    return edge;\n}\n\nuniform vec3 gEmissiveColor;  // 48 255 48\n\nvoid intersectObjects(inout Intersection intersection, inout Ray ray) {\n    float d;\n    float distance = 0.0;\n    vec3 p = ray.origin;\n    float eps;\n\n    for (float i = 0.0; i < 300.0; i++) {\n        d = abs(map(p));\n        distance += d;\n        p = ray.origin + distance * ray.direction;\n        intersection.count = i;\n        eps = gSceneEps * distance;\n        if (abs(d) < eps) break;\n    }\n\n    if (distance < intersection.distance) {\n        intersection.distance = distance;\n        intersection.hit = true;\n        intersection.position = p;\n        intersection.normal = calcNormal(p, map, gSceneEps);\n\n        if (abs(dBall(p)) < eps) {\n            intersection.baseColor = vec3(0.0);\n            intersection.roughness = 0.0;\n            intersection.metallic = 1.0;\n            intersection.emission = vec3(0.0);\n            intersection.transparent = false;\n            intersection.refractiveIndex = 1.2;\n            intersection.reflectance = 1.0;\n        } else {\n            intersection.baseColor = vec3(gBaseColor);\n            intersection.roughness = gRoughness;\n            intersection.metallic = gMetallic;\n\n            float edge = calcEdge(p);\n            intersection.emission = gEmissiveIntensity * gEmissiveColor * pow(edge, gEdgePower) * saturate(cos(beat * TAU - mod(0.5 * intersection.position.z, TAU)));\n\n            intersection.transparent = false;\n            intersection.reflectance = 0.0;\n        }\n    }\n}\n\nvoid intersectScene(inout Intersection intersection, inout Ray ray) {\n    intersection.distance = INF;\n    intersectObjects(intersection, ray);\n}\n\nfloat calcAo(in vec3 p, in vec3 n) {\n    float k = 1.0, occ = 0.0;\n    for (int i = 0; i < 5; i++) {\n        float len = 0.15 + float(i) * 0.15;\n        float distance = map(n * len + p);\n        occ += (len - distance) * k;\n        k *= 0.5;\n    }\n    return saturate(1.0 - occ);\n}\n\nfloat calcShadow(in vec3 p, in vec3 rd) {\n    float d;\n    float distance = OFFSET;\n    float bright = 1.0;\n    float shadowIntensity = 0.8;\n    float shadowSharpness = 10.0;\n\n    for (int i = 0; i < 30; i++) {\n        d = map(p + rd * distance);\n        if (d < EPS) return shadowIntensity;\n        bright = min(bright, shadowSharpness * d / distance);\n        distance += d;\n    }\n\n    return shadowIntensity + (1.0 - shadowIntensity) * bright;\n}\n\n#define FLT_EPS 5.960464478e-8\n\nfloat roughnessToExponent(float roughness) { return clamp(2.0 * (1.0 / (roughness * roughness)) - 2.0, FLT_EPS, 1.0 / FLT_EPS); }\n\nuniform float gF0;  // 0.95 0 1\nfloat fresnelSchlick(float f0, float cosTheta) { return f0 + (1.0 - f0) * pow((1.0 - cosTheta), 5.0); }\n\nvec3 evalPointLight(inout Intersection i, vec3 v, vec3 lp, vec3 radiance) {\n    vec3 n = i.normal;\n    vec3 p = i.position;\n    vec3 ref = mix(vec3(0.04), i.baseColor, i.metallic);\n\n    vec3 l = lp - p;\n    float len = length(l);\n    l /= len;\n\n    vec3 h = normalize(l + v);\n\n    vec3 diffuse = mix(1.0 - ref, vec3(0.0), i.metallic) * i.baseColor / PI;\n    // ref *= fresnelSchlick(gF0, dot(l, h));\n\n    float m = roughnessToExponent(i.roughness);\n    vec3 specular = ref * pow(max(0.0, dot(n, h)), m) * (m + 2.0) / (8.0 * PI);\n    return (diffuse + specular) * radiance * max(0.0, dot(l, n)) / (len * len);\n}\n\nvec3 evalDirectionalLight(inout Intersection i, vec3 v, vec3 lightDir, vec3 radiance) {\n    vec3 n = i.normal;\n    vec3 p = i.position;\n    vec3 ref = mix(vec3(0.04), i.baseColor, i.metallic);\n\n    vec3 l = lightDir;\n    vec3 h = normalize(l + v);\n\n    vec3 diffuse = mix(1.0 - ref, vec3(0.0), i.metallic) * i.baseColor / PI;\n    // ref *= fresnelSchlick(gF0, dot(l, h));\n\n    float m = roughnessToExponent(i.roughness);\n    vec3 specular = ref * pow(max(0.0, dot(n, h)), m) * (m + 2.0) / (8.0 * PI);\n    return (diffuse + specular) * radiance * max(0.0, dot(l, n));\n}\n\nuniform float gCameraLightIntensity;  // 1 0 10\n\nvoid calcRadiance(inout Intersection intersection, inout Ray ray) {\n    intersection.hit = false;\n    intersectScene(intersection, ray);\n\n    if (intersection.hit) {\n        intersection.color = intersection.emission;\n        intersection.color += evalPointLight(intersection, -ray.direction, vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ), gCameraLightIntensity * vec3(80.0, 80.0, 100.0));\n        // intersection.color += evalPointLight(intersection, -ray.direction, vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ + 4.0), vec3(0.0));\n        intersection.color += evalDirectionalLight(intersection, -ray.direction, vec3(-0.48666426339228763, 0.8111071056538127, 0.3244428422615251), vec3(2.0, 1.0, 1.0));\n\n        // fog\n        // intersection.color = mix(intersection.color, vec3(0.6),\n        //                         1.0 - exp(-0.0001 * intersection.distance *\n        //                         intersection.distance *\n        //                         intersection.distance));\n    } else {\n        intersection.color = vec3(0.01);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera and ray\n    Camera camera;\n    camera.eye = vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ);\n    camera.target = vec3(gCameraTargetX, gCameraTargetY, gCameraTargetZ);\n    camera.up = vec3(0.0, 1.0, 0.0);  // y-up\n    Ray ray = cameraShootRay(camera, uv);\n\n    vec3 color = vec3(0.0);\n    vec3 reflection = vec3(1.0);\n    Intersection intersection;\n\n    for (int bounce = 0; bounce < 2; bounce++) {\n        calcRadiance(intersection, ray);\n        color += reflection * intersection.color;\n        if (!intersection.hit || intersection.reflectance == 0.0) break;\n        reflection *= intersection.reflectance;\n\n        bool isIncoming = dot(ray.direction, intersection.normal) < 0.0;\n        vec3 orientingNormal = isIncoming ? intersection.normal : -intersection.normal;\n\n        bool isTotalReflection = false;\n        if (intersection.transparent) {\n            float nnt = isIncoming ? 1.0 / intersection.refractiveIndex : intersection.refractiveIndex;\n            ray.origin = intersection.position - orientingNormal * OFFSET;\n            ray.direction = refract(ray.direction, orientingNormal, nnt);\n            isTotalReflection = (ray.direction == vec3(0.0));\n            bounce = 0;\n        }\n\n        if (isTotalReflection || !intersection.transparent) {\n            ray.origin = intersection.position + orientingNormal * OFFSET;\n            vec3 l = reflect(ray.direction, orientingNormal);\n            reflection *= fresnelSchlick(gF0, dot(l, orientingNormal));\n            ray.direction = l;\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="vec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nuniform float gTonemapExposure;  // 0.1 0.0 2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = texture(iPrevPass, uv).rgb;\n    col = acesFilm(col * gTonemapExposure);\n    col = pow(col, vec3(1.0 / 2.2));\n    fragColor = vec4(col, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="float brightness(vec3 c) { return max(max(c.r, c.g), c.b); }\n\nuniform float gBloomThreshold;  // 1.0 0 100\nuniform float gBloomSoftKnee;   // 0.5 0 4\n\n// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Runtime/Components/BloomComponent.cs#L78-L109\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float softKnee = gBloomSoftKnee;\n    float lthresh = gBloomThreshold;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iPrevPass, uv);\n    vec3 m = color.rgb;\n    float br = brightness(m);\n\n    float knee = lthresh * softKnee + 1e-5f;\n    vec3 curve = vec3(lthresh - knee, knee * 2.0, 0.25 / knee);\n    float rq = clamp(br - curve.x, 0.0, curve.y);\n    rq = curve.z * rq * rq;\n\n    m *= max(rq, br - lthresh) / max(br, 1e-5);\n    fragColor = vec4(m, color.a);\n}"},function(n,e,t){"use strict";t.r(e),e.default="void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    fragColor = vec4(tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomSpread;  // 1.3 1 2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomSpread * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomIntensity;  // 1 0 100\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iBeforeBloom, uv).rgb;\n    vec3 pair = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomIntensity * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\nprecision mediump float;\nuniform float iSampleRate;\nuniform float iBlockOffset;\n\nvec2 mainSound(float time);\n\nout vec4 outColor;\nvoid main() {\n    float t = iBlockOffset + ((gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 512.0) / iSampleRate;\n    vec2 y = mainSound(t);\n    vec2 v = floor((0.5 + 0.5 * y) * 65536.0);\n    vec2 vl = mod(v, 256.0) / 255.0;\n    vec2 vh = floor(v / 256.0) / 255.0;\n    outColor = vec4(vl.x, vh.x, vl.y, vh.y);\n}\n\n//--------------------\n// ここから下を書き換える\n//--------------------\n\n#define BPM 140.0\n#define PI 3.141592654\n#define TAU 6.283185307\n\nfloat sidechain;\n\n// general functions\nfloat timeToBeat(float t) { return t / 60.0 * BPM; }\nfloat beatToTime(float b) { return b / BPM * 60.0; }\nfloat noteToFreq(float n) { return 440.0 * pow(2.0, (n - 69.0) / 12.0); }\nfloat chord(float n) { return (n < 1.0 ? 55.0 : n < 2.0 ? 58.0 : n < 3.0 ? 62.0 : 65.0); }\n\n// https://www.shadertoy.com/view/4djSRW\nvec4 noise(float p) {\n    vec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy + 33.33);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);\n}\n\n// primitive oscillators\nfloat sine(float phase) { return sin(TAU * phase); }\nfloat saw(float phase) { return 2.0 * fract(phase) - 1.0; }\nfloat square(float phase) { return fract(phase) < 0.5 ? -1.0 : 1.0; }\n\n// drums\nfloat kick(float note, float time) {\n    float amp = exp(-1.0 * time);\n    float phase = 15.0 * time - 13.0 * exp(-40.0 * time);\n    return amp * sine(phase);\n}\n\nvec2 hihat(float note, float time) {\n    float amp = exp(-50.0 * time);\n    return amp * noise(time * 100.0).xy;\n}\n\n// synths\nvec2 bass(float note, float time) {\n    float freq = noteToFreq(note);\n    return vec2(saw(freq * time) + sine(freq * time)) / 2.0;\n}\n\nvec2 pad(float note, float time) {\n    float freq = noteToFreq(note);\n    float vib = 0.2 * sine(3.0 * time);\n    return vec2(saw(freq * 0.99 * time + vib), saw(freq * 1.01 * time + vib));\n}\n\nvec2 arp(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.1 * exp(-30.0 * time);\n    float fm = fmamp * square(time * freq * 1.0);\n    float amp = exp(-50.0 * time);\n    return amp * vec2(sine(freq * 0.999 * time + fm), sine(freq * 1.001 * time + fm));\n}\n\nvec2 arpsine(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.02 * exp(-70.0 * time);\n    float fm = fmamp * sine(time * freq * 1.0);\n    float amp = exp(-70.0 * time);\n    return amp * vec2(sine(freq * 0.999 * time + fm), sine(freq * 1.001 * time + fm));\n}\n\n// 1ビートを最大何分割するか。16分音符に対応するなら4\n#define NOTE_DIV 4\n\n#define F(a) a | 4 << 8, a | 4 << 8, a | 4 << 8, a | 4 << 8\n#define E(a) a | 8 << 8, a | 8 << 8\n#define E2(a, b) a | 8 << 8, a | 8 << 8, b | 8 << 8, b | 8 << 8\n#define S(a) a | 16 << 8\n#define S4(a, b, c, d) a | 16 << 8, b | 16 << 8, c | 16 << 8, d | 16 << 8\n\n#define SEQUENCER(beat, time, beatLen, devPat, devLen, notes, development, toneFunc)                                               \\\n    int indexOffset = development[int(mod(beat / float(beatLen), float(devLen)))] * beatLen * NOTE_DIV;                            \\\n                                                                                                                                   \\\n    int[beatLen * NOTE_DIV] indexes;                                                                                               \\\n    int currentIndex = 0;                                                                                                          \\\n    for (int i = 0; i < beatLen * NOTE_DIV;) {                                                                                     \\\n        int div = notes[i + indexOffset] >> 8;                                                                                     \\\n        if (div == 4) {                                                                                                            \\\n            indexes[i + 0] = currentIndex;                                                                                         \\\n            indexes[i + 1] = currentIndex;                                                                                         \\\n            indexes[i + 2] = currentIndex;                                                                                         \\\n            indexes[i + 3] = currentIndex;                                                                                         \\\n            i += 4;                                                                                                                \\\n        } else if (div == 8) {                                                                                                     \\\n            indexes[i + 0] = currentIndex;                                                                                         \\\n            indexes[i + 1] = currentIndex;                                                                                         \\\n            i += 2;                                                                                                                \\\n        } else if (div == 16) {                                                                                                    \\\n            indexes[i + 0] = currentIndex;                                                                                         \\\n            i += 1;                                                                                                                \\\n        }                                                                                                                          \\\n                                                                                                                                   \\\n        currentIndex += 16 / div;                                                                                                  \\\n    }                                                                                                                              \\\n                                                                                                                                   \\\n    float indexFloat = mod(beat * float(NOTE_DIV), float(beatLen * NOTE_DIV));                                                     \\\n    int index = int(indexFloat);                                                                                                   \\\n    int note = notes[index + indexOffset] & 255;                                                                                   \\\n    float localTime = beatToTime((indexFloat - float(indexes[index])) / float(notes[index + indexOffset] >> 8) * float(NOTE_DIV)); \\\n    float amp = (note == 0) ? 0.0 : 1.0;                                                                                           \\\n    vec2 ret = vec2(toneFunc(float(note), localTime) * amp);\n\nvec2 arp1(float beat, float time) {\n// 1つの展開のビート数\n#define ARP1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP1_DEV_PAT 2\n\n// 展開の長さ\n#define ARP1_DEV_LEN 4\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[ARP1_BEAT_LEN * NOTE_DIV * ARP1_DEV_PAT] notes = int[](\n        //\n        // 展開0\n        //\n\n        // 1\n        S4(57, 0, 59, 0),\n\n        // 2\n        S4(60, 0, 64, 0),\n\n        // 3\n        S4(67, 0, 69, 0),\n\n        // 4\n        S4(71, 0, 74, 0),\n\n        // 5\n        S4(57, 0, 59, 0),\n\n        // 6\n        S4(60, 0, 64, 0),\n\n        // 7\n        S4(67, 0, 69, 0),\n\n        // 8\n        S4(71, 0, 74, 0),\n\n        //\n        // 展開1（とりあえず今は展開0と同じ）\n        //\n\n        // 1\n        S4(57, 0, 59, 0),\n\n        // 2\n        S4(60, 0, 64, 0),\n\n        // 3\n        S4(67, 0, 69, 0),\n\n        // 4\n        S4(71, 0, 74, 0),\n\n        // 5\n        S4(57, 0, 59, 0),\n\n        // 6\n        S4(60, 0, 64, 0),\n\n        // 7\n        S4(67, 0, 69, 0),\n\n        // 8\n        S4(71, 0, 74, 0));\n\n    // 展開\n    int[ARP1_DEV_LEN] development = int[](0, 0, 1, 1);\n\n    SEQUENCER(beat, time, ARP1_BEAT_LEN, ARP1_DEV_PAT, ARP1_DEV_LEN, notes, development, arp)\n    return ret;\n}\n\nvec2 arp2(float beat, float time) {\n// 1つの展開のビート数\n#define ARP2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP2_DEV_PAT 2\n\n// 展開の長さ\n#define ARP2_DEV_LEN 8\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[ARP2_BEAT_LEN * NOTE_DIV * ARP2_DEV_PAT] notes = int[](\n        //\n        // 展開0\n        //\n\n        // 1\n        S4(0, 69, 0, 71),\n\n        // 2\n        S4(0, 72, 0, 76),\n\n        // 3\n        S4(0, 79, 0, 81),\n\n        // 4\n        S4(0, 83, 0, 86),\n\n        // 5\n        S4(0, 69, 0, 71),\n\n        // 6\n        S4(0, 72, 0, 76),\n\n        // 7\n        S4(0, 79, 0, 81),\n\n        // 8\n        S4(0, 83, 0, 86),\n\n        //\n        // 展開1（とりあえず今は展開0と同じ）\n        //\n\n        // 1\n        S4(0, 69, 0, 71),\n\n        // 2\n        S4(0, 72, 0, 76),\n\n        // 3\n        S4(0, 79, 0, 81),\n\n        // 4\n        S4(0, 83, 0, 86),\n\n        // 5\n        S4(0, 69, 0, 71),\n\n        // 6\n        S4(0, 72, 0, 76),\n\n        // 7\n        S4(0, 79, 0, 81),\n\n        // 8\n        S4(0, 83, 0, 86));\n\n    // 展開\n    int[ARP2_DEV_LEN] development = int[](0, 0, 0, 0, 1, 1, 1, 1);\n\n    SEQUENCER(beat, time, ARP2_BEAT_LEN, ARP2_DEV_PAT, ARP2_DEV_LEN, notes, development, arp)\n    return ret;\n}\n\nvec2 arp3(float beat, float time) {\n// 1つの展開のビート数\n#define ARP3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP3_DEV_PAT 2\n\n// 展開の長さ\n#define ARP3_DEV_LEN 8\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[ARP3_BEAT_LEN * NOTE_DIV * ARP3_DEV_PAT] notes = int[](\n        //\n        // 展開0\n        //\n\n        // 1\n        S4(72, 60, 55, 64),\n\n        // 2\n        S4(0, 0, 0, 0),\n\n        // 3\n        S4(67, 55, 64, 55),\n\n        // 4\n        S4(0, 0, 0, 0),\n\n        // 5\n        S4(72, 60, 55, 64),\n\n        // 6\n        S4(0, 0, 0, 0),\n\n        // 7\n        S4(67, 55, 64, 55),\n\n        // 8\n        S4(0, 0, 0, 0),\n\n        //\n        // 展開1（とりあえず今は展開0と同じ）\n        //\n\n        // 1\n        S4(72, 60, 55, 64),\n\n        // 2\n        S4(0, 0, 0, 0),\n\n        // 3\n        S4(67, 55, 64, 55),\n\n        // 4\n        S4(0, 0, 0, 0),\n\n        // 5\n        S4(72, 60, 55, 64),\n\n        // 6\n        S4(0, 0, 0, 0),\n\n        // 7\n        S4(67, 55, 64, 55),\n\n        // 8\n        S4(0, 0, 0, 0));\n\n    // 展開\n    int[ARP3_DEV_LEN] development = int[](0, 0, 0, 0, 1, 1, 1, 1);\n\n    SEQUENCER(beat, time, ARP3_BEAT_LEN, ARP3_DEV_PAT, ARP3_DEV_LEN, notes, development, arpsine)\n    return ret;\n}\n\nvec2 arp4(float beat, float time) {\n// 1つの展開のビート数\n#define ARP4_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP4_DEV_PAT 2\n\n// 展開の長さ\n#define ARP4_DEV_LEN 8\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[ARP4_BEAT_LEN * NOTE_DIV * ARP4_DEV_PAT] notes = int[](\n        //\n        // 展開0\n        //\n\n        // 1\n        S4(0, 0, 0, 0),\n\n        // 2\n        S4(67, 60, 72, 55),\n\n        // 3\n        S4(0, 0, 0, 0),\n\n        // 4\n        S4(67, 60, 79, 62),\n\n        // 5\n        S4(0, 0, 0, 0),\n\n        // 6\n        S4(67, 60, 72, 55),\n\n        // 7\n        S4(0, 0, 0, 0),\n\n        // 8\n        S4(67, 60, 79, 62),\n\n        //\n        // 展開1（とりあえず今は展開0と同じ）\n        //\n\n        // 1\n        S4(0, 0, 0, 0),\n\n        // 2\n        S4(67, 60, 72, 55),\n\n        // 3\n        S4(0, 0, 0, 0),\n\n        // 4\n        S4(67, 60, 79, 62),\n\n        // 5\n        S4(0, 0, 0, 0),\n\n        // 6\n        S4(67, 60, 72, 55),\n\n        // 7\n        S4(0, 0, 0, 0),\n\n        // 8\n        S4(67, 60, 79, 62));\n\n    // 展開\n    int[ARP4_DEV_LEN] development = int[](0, 0, 0, 0, 1, 1, 1, 1);\n\n    SEQUENCER(beat, time, ARP4_BEAT_LEN, ARP4_DEV_PAT, ARP4_DEV_LEN, notes, development, arpsine)\n    return ret;\n}\n\nvec2 kick1(float beat, float time) {\n// 1つの展開のビート数\n#define KICK1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define KICK1_DEV_PAT 2\n\n// 展開の長さ\n#define KICK1_DEV_LEN 8\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[KICK1_BEAT_LEN * NOTE_DIV * KICK1_DEV_PAT] notes = int[](\n        //\n        // 展開0\n        //\n\n        // 1\n        F(1),\n\n        // 2\n        F(0),\n\n        // 3\n        F(0),\n\n        // 4\n        E2(0, 1),\n\n        // 5\n        F(1),\n\n        // 6\n        F(0),\n\n        // 7\n        F(0),\n\n        // 8\n        F(1),\n\n        //\n        // 展開1（とりあえず今は展開0と同じ）\n        //\n\n        // 1\n        F(1),\n\n        // 2\n        F(1),\n\n        // 3\n        F(1),\n\n        // 4\n        F(1),\n\n        // 5\n        F(1),\n\n        // 6\n        F(1),\n\n        // 7\n        F(1),\n\n        // 8\n        F(1));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[KICK1_DEV_LEN] development = int[](0, 0, 0, 0, 1, 1, 1, 1);\n\n    SEQUENCER(beat, time, KICK1_BEAT_LEN, KICK1_DEV_PAT, KICK1_DEV_LEN, notes, development, kick)\n\n    sidechain = smoothstep(0.0, 0.4, localTime);\n    return ret;\n}\n\nvec2 mainSound(float time) {\n    float beat = timeToBeat(time);\n    vec2 ret = vec2(0.0);\n\n    // kick\n    ret += kick1(beat, time);\n\n    // hihat\n    float hihatTime = beatToTime(mod(beat + 0.5, 1.0));\n    ret += 0.5 * hihat(1.0, hihatTime);\n\n    // bass\n    float bassNote = chord(0.0) - 22.0;\n    ret += sidechain * 0.3 * bass(bassNote, time);\n\n    // chord\n    ret += sidechain * 0.0 * vec2(pad(chord(0.0), time) + pad(chord(1.0), time) + pad(chord(2.0), time) + pad(chord(3.0), time)) / 4.0;\n\n    // arp\n    ret += vec2(0.2, 0.0) * arp1(beat, time);  // L70 R0\n    ret += vec2(0.0, 0.2) * arp2(beat, time);  // R70 R0\n    ret += vec2(0.1, 0.6) * arp3(beat, time);  // R70 R0 サイン波のアルペジオ\n    ret += vec2(0.6, 0.1) * arp4(beat, time);  // R70 R0 サイン波のアルペジオ\n\n    return clamp(ret, -1.0, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="body{background-color:#000;margin:0;padding:0;color:#fff}canvas{display:block;position:absolute;top:0;left:0;right:0;bottom:0;margin:auto}#c{display:none}p{font-size:100px}"},function(n,e,t){"use strict";t.r(e);var o=0,i=1,r=2,a=3,c=4,s=function(){},l=function(n,e,t,l,f,u,m,d,v,p,g){var E=this;this.play=function(){E.timeLength=n,E.isPlaying=!0,E.needsUpdate=!1,E.time=0,E.uniformArray=[],E.uniforms={};var h=E.audioContext=new window.AudioContext,x=E.canvas=document.createElement("canvas");x.width=window.innerWidth,x.height=window.innerHeight,window.document.body.appendChild(x);var y=x.getContext("webgl2",{preserveDrawingBuffer:!0});if(y)if(y.getExtension("EXT_color_buffer_float"))if(y.getExtension("OES_texture_float_linear")){y.enable(y.CULL_FACE);var b=[[1,1],[-1,1],[1,-1],[-1,-1]],_=new Float32Array([].concat.apply([],b)),T=y.createBuffer();y.bindBuffer(y.ARRAY_BUFFER,T),y.bufferData(y.ARRAY_BUFFER,_,y.STATIC_DRAW),y.bindBuffer(y.ARRAY_BUFFER,null);var R=[[0,1,2],[3,2,1]],S=new Uint16Array([].concat.apply([],R)),A=y.createBuffer();y.bindBuffer(y.ELEMENT_ARRAY_BUFFER,A),y.bufferData(y.ELEMENT_ARRAY_BUFFER,S,y.STATIC_DRAW),y.bindBuffer(y.ELEMENT_ARRAY_BUFFER,null);var P=y.createVertexArray(),F=(t.split("\n").length,function(n,e){var t=y.createShader(e);if(y.shaderSource(t,n),y.compileShader(t),!y.getShaderParameter(t,y.COMPILE_STATUS)){var o=y.getShaderInfoLog(t);console.log(n,o)}return t}),C=function(n){var t=[F(e,y.VERTEX_SHADER),F(n,y.FRAGMENT_SHADER)],o=y.createProgram();return t.forEach((function(n){return y.attachShader(o,n)})),y.linkProgram(o),y.getProgramParameter(o,y.LINK_STATUS)||console.log(y.getProgramInfoLog(o)),o},I=function(n,e,t,o){!function(n){y.bindVertexArray(P),y.bindBuffer(y.ARRAY_BUFFER,T),y.bindBuffer(y.ELEMENT_ARRAY_BUFFER,A);var e=y.getAttribLocation(n,"vert2d"),t=y.FLOAT,o=b[0].length,i=o*Float32Array.BYTES_PER_ELEMENT;y.enableVertexAttribArray(e),y.vertexAttribPointer(e,o,t,!1,i,0),y.bindVertexArray(null)}(n);var r=new s;if(r.program=n,r.index=e,r.type=t,r.scale=o,r.uniforms={iResolution:{type:"v3",value:[x.width*r.scale,x.height*r.scale,0]},iTime:{type:"f",value:0},iPrevPass:{type:"t",value:Math.max(r.index-1,0)},iBeforeBloom:{type:"t",value:Math.max(f-1,0)},iBlockOffset:{type:"f",value:0},iSampleRate:{type:"f",value:h.sampleRate}},t===a){var l=e-(f+u);r.uniforms.iPairBloomDown={type:"t",value:e-2*l}}return E.uniformArray.forEach((function(n){r.uniforms[n.key]={type:"number"==typeof n.initValue?"f":"v3",value:n.initValue}})),r.locations=function(n){var e={};return Object.keys(n.uniforms).forEach((function(t){e[t]=y.getUniformLocation(n.program,t)})),e}(r),function(n){if(n.type!==i){var e=n.uniforms.iResolution.value[0],t=n.uniforms.iResolution.value[1],o=y.FLOAT,r=y.RGBA32F,a=y.LINEAR;n.type===c&&(e=512,t=512,o=y.UNSIGNED_BYTE,r=y.RGBA,a=y.NEAREST),n.frameBuffer=y.createFramebuffer(),y.bindFramebuffer(y.FRAMEBUFFER,n.frameBuffer),n.texture=y.createTexture(),y.bindTexture(y.TEXTURE_2D,n.texture),y.texImage2D(y.TEXTURE_2D,0,r,e,t,0,y.RGBA,o,null),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MAG_FILTER,a),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_MIN_FILTER,a),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_S,y.CLAMP_TO_EDGE),y.texParameteri(y.TEXTURE_2D,y.TEXTURE_WRAP_T,y.CLAMP_TO_EDGE),y.framebufferTexture2D(y.FRAMEBUFFER,y.COLOR_ATTACHMENT0,y.TEXTURE_2D,n.texture,0),y.bindTexture(y.TEXTURE_2D,null),y.bindRenderbuffer(y.RENDERBUFFER,null),y.bindFramebuffer(y.FRAMEBUFFER,null)}}(r),r},w=function(n){y.useProgram(n.program),y.bindFramebuffer(y.FRAMEBUFFER,n.frameBuffer),y.clear(y.COLOR_BUFFER_BIT|y.DEPTH_BUFFER_BIT);for(var e=0,t=Object.entries(n.uniforms);e<t.length;e++){var o=t[e],i=o[0],r=o[1],a={f:y.uniform1f,v3:y.uniform3fv},c={iPrevPass:0,iBeforeBloom:1,iPairBloomDown:2};"t"===r.type?(y.activeTexture(y.TEXTURE0+c[i]),y.bindTexture(y.TEXTURE_2D,B[r.value].texture),y.uniform1i(n.locations[i],c[i])):a[r.type].call(y,n.locations[i],r.value)}y.bindVertexArray(P);var s=0*R[0].length;y.drawElements(y.TRIANGLES,S.length,y.UNSIGNED_SHORT,s);var l=y.getError();l!==y.NO_ERROR&&console.log(l),y.bindVertexArray(null),y.useProgram(null)};E.playSound=function(){E.audioSource.start(E.audioContext.currentTime,E.time%E.timeLength)},E.render=function(){B.forEach((function(n){n.uniforms.iTime.value=E.time;for(var e=0,t=Object.entries(E.uniforms);e<t.length;e++){var o=t[e],i=o[0],r=o[1];n.uniforms[i].value="number"==typeof r?r:[r[0]/255,r[1]/255,r[2]/255]}w(n)}))};var D=function(n){for(var e,t=/uniform (float|vec3) (g.+);\s*(\/\/ ([\-\d\.-]+))?( ([\-\d\.]+) ([\-\d\.]+))?/g;null!==(e=t.exec(n));){var o=void 0;o="float"===e[1]?{key:e[2],initValue:void 0!==e[4]?parseFloat(e[4]):0,min:void 0!==e[6]?parseFloat(e[6]):0,max:void 0!==e[7]?parseFloat(e[7]):1}:{key:e[2],initValue:[parseFloat(e[4]),parseFloat(e[6]),parseFloat(e[7])]},E.uniformArray.push(o),E.uniforms[o.key]=o.initValue}};D(t),l.forEach((function(n){D(n)})),D(m),D(d),D(v),D(p);var B=[],z=0;l.forEach((function(n,e,c){if(e===f){B.push(I(C(t+m),z,r,1)),z++;for(var s=1,l=0;l<u;l++)s*=.5,B.push(I(C(t+d),z,r,s)),z++;for(l=0;l<u-1;l++)s*=2,B.push(I(C(t+v),z,a,s)),z++;B.push(I(C(t+p),z,a,1)),z++}B.push(I(C(t+n),z,e<c.length-1?o:i,1)),z++})),function(){for(var e=h.createBuffer(2,h.sampleRate*n,h.sampleRate),t=h.sampleRate*n/262144,o=C(g),i=I(o,0,c,1),r=0;r<t;r++){i.uniforms.iBlockOffset.value=262144*r/h.sampleRate,w(i);var a=new Uint8Array(1048576);y.readPixels(0,0,512,512,y.RGBA,y.UNSIGNED_BYTE,a);for(var s=e.getChannelData(0),l=e.getChannelData(1),f=0;f<262144;f++)s[262144*r+f]=(a[4*f+0]+256*a[4*f+1])/65535*2-1,l[262144*r+f]=(a[4*f+2]+256*a[4*f+3])/65535*2-1}E.audioSource=h.createBufferSource(),E.audioSource.buffer=e,E.audioSource.loop=!0,E.audioSource.connect(h.destination)}();var L=0,N=function(n){requestAnimationFrame(N);var e=.001*(n-L);(E.isPlaying||E.needsUpdate)&&(null!=E.onRender&&E.onRender(E.time,e),E.render(),E.isPlaying&&(E.time+=e)),E.needsUpdate=!1,L=n};N(0)}else alert("need OES_texture_float_linear");else alert("need EXT_color_buffer_float");else console.log("WebGL 2 is not supported...")}},f=function(n,e,t){return n*(1-t)+e*t},u=function(n,e){return Math.sin(n+e)+.5*Math.sin(2*n+e)+.25*Math.sin(4*n+e)},m=function(){function n(n,e,t){this.x=n,this.y=e,this.z=t}return n.prototype.add=function(e){return new n(this.x+e.x,this.y+e.y,this.z+e.z)},n.prototype.mul=function(e){return new n(this.x*e.x,this.y*e.y,this.z*e.z)},n.prototype.scale=function(e){return new n(this.x*e,this.y*e,this.z*e)},n.mix=function(e,t,o){return new n(f(e.x,t.x,o),f(e.y,t.y,o),f(e.z,t.z,o))},n.fbm=function(e){return new n(u(11431,e),u(23123,e),u(87034,e))},n}(),d=new l(82.28571428571429,t(0).default,t(1).default,[t(2).default,t(3).default],1,5,t(4).default,t(5).default,t(6).default,t(7).default,t(8).default),v=function(){function n(n){this.input=n,this.begin=0,this.done=!1}return n.prototype.then=function(n,e){return this.done||this.input<this.begin?this:this.input>this.begin+n?(this.begin+=n,this):(e(this.input-this.begin),this.done=!0,this)},n}();window.addEventListener("load",(function(n){var e=document.createElement("style");e.innerText=t(9).default,document.head.appendChild(e);var o=document.createElement("p");document.body.appendChild(o),o.innerHTML="click me!",o.onclick=function(){document.body.requestFullscreen().then((function(){d.onRender=function(n,e){!function(n,e){var t=140*n/60,o=new m(0,0,10),i=new m(0,0,0);d.uniformArray.forEach((function(n){d.uniforms[n.key]=n.initValue})),new v(t).then(8,(function(n){o=new m(0,.2,-13-.1*n).add(m.fbm(n).scale(.01)),i=new m(0,0,0),d.uniforms.gMandelboxScale=1.8,d.uniforms.gCameraLightIntensity=.7,d.uniforms.gEmissiveIntensity=0,d.uniforms.gSceneEps=.003})).then(8,(function(n){o=new m(0,.2,-17-.1*n).add(m.fbm(n).scale(.01)),i=new m(0,0,0),d.uniforms.gMandelboxScale=1.8,d.uniforms.gCameraLightIntensity=1.2,d.uniforms.gEmissiveIntensity=0})).then(16,(function(n){o=new m(-.08503080276580499,1.3346599987007965,-15.01732922836809).add(m.fbm(n).scale(.01)),i=new m(.784904810273659,3.3444920877098543,7.36034431847018),d.uniforms.gCameraFov=(n<8?2:5)+.05*n,d.uniforms.gMandelboxScale=2.5010184112784057,d.uniforms.gCameraLightIntensity=1.4,d.uniforms.gEmissiveIntensity=0,d.uniforms.gSceneEps=.0002645177773046626})).then(16,(function(n){var e=new m(0,2.8,-8),t=new m(0,0,-32);o=m.mix(e,t,function(n,e,t){return n<e?e:n>t?t:n}(.1*n,0,1)),i=new m(0,0,0),d.uniforms.gMandelboxScale=1+.02*n,d.uniforms.gEmissiveIntensity=6})).then(1600,(function(n){o=new m(0,0,25).add(m.fbm(n).scale(.01)),i=new m(0,0,0),d.uniforms.gMandelboxScale=1,d.uniforms.gEmissiveIntensity=6})),d.uniforms.gCameraEyeX=o.x,d.uniforms.gCameraEyeY=o.y,d.uniforms.gCameraEyeZ=o.z,d.uniforms.gCameraTargetX=i.x,d.uniforms.gCameraTargetY=i.y,d.uniforms.gCameraTargetZ=i.z}(n)},d.play(),d.playSound()}))}}),!1)}]);