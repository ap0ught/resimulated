!function(e){var n={};function r(o){if(n[o])return n[o].exports;var t=n[o]={i:o,l:!1,exports:{}};return e[o].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=e,r.c=n,r.d=function(e,n,o){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)r.d(o,t,function(n){return e[n]}.bind(null,t));return o},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}([function(e,n,r){var o=function(){var e=document.createElement("canvas");e.width=512,e.height=512,e.style.border="solid",window.document.body.appendChild(e);var n=e.getContext("webgl2");if(n){n.enable(n.CULL_FACE);var o=[[1,1],[-1,1],[1,-1],[-1,-1]],t=new Float32Array([].concat.apply([],o)),i=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,i),n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null);var a=[[0,1,2],[3,2,1]],l=new Uint16Array([].concat.apply([],a)),u=n.createBuffer();n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,u),n.bufferData(n.ELEMENT_ARRAY_BUFFER,l,n.STATIC_DRAW),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null);var f={iResolution:{type:"vec3",value:[512,512,0]},iTime:{type:"float",value:0},iTimeDelta:{type:"float",value:0},iFrame:{type:"int",value:0},iMouse:{type:"vec4",value:[0,0,0,0]}},c=n.createVertexArray(),m=function(e,r){var o=n.createShader(r);return n.shaderSource(o,e),n.compileShader(o),n.getShaderParameter(o,n.COMPILE_STATUS)||console.log(e,n.getShaderInfoLog(o)),o};Promise.all([m(r(1).default,n.VERTEX_SHADER),m(r(2).default,n.FRAGMENT_SHADER)]).then((function(e){var r=n.createProgram();return e.forEach((function(e){return n.attachShader(r,e)})),n.linkProgram(r),n.getProgramParameter(r,n.LINK_STATUS)||console.log(n.getProgramInfoLog(r)),r})).then((function(e){return function(e){n.bindVertexArray(c),n.bindBuffer(n.ARRAY_BUFFER,i),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,u);var r=n.getAttribLocation(e,"vert2d"),t=n.FLOAT,a=o[0].length,l=a*Float32Array.BYTES_PER_ELEMENT;n.enableVertexAttribArray(r),n.vertexAttribPointer(r,a,t,!1,l,0),n.bindVertexArray(null)}(e),function(e){Object.keys(f).forEach((function(r,o){f[r].location=n.getUniformLocation(e,r)}))}(e),e})).then((function(e){var r=0,o=function(t){!function(e,r,o){n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),n.useProgram(e),f.iTime.value=.001*r,f.iTimeDelta.value=.001*(r-o),f.iFrame.value++,Object.keys(f).forEach((function(e){var r={float:n.uniform1f,vec2:n.uniform2fv,vec3:n.uniform3fv,vec4:n.uniform4fv,int:n.uniform1i},o=f[e];r[o.type](o.location,o.value)})),n.bindVertexArray(c);var t=0*a[0].length;n.drawElements(n.TRIANGLES,l.length,n.UNSIGNED_SHORT,t);var i=n.getError();i!==n.NO_ERROR&&console.log(i),n.bindVertexArray(null),n.useProgram(null)}(e,t,r),requestAnimationFrame(o),r=t};o(0)}))}else console.log("WebGL 2 is not supported...")};window.addEventListener("load",(function(e){new o}),!1)},function(e,n,r){"use strict";r.r(n),n.default="#version 300 es\n\ninvariant gl_Position;\nin vec2 vert2d;\n\nvoid main(void) {\n  gl_Position = vec4(vert2d, 0, 1);\n}\n"},function(e,n,r){"use strict";r.r(n),n.default="#version 300 es\n#ifdef GL_ES\nprecision highp float;\nprecision highp int;\nprecision mediump sampler3D;\n#endif\n#define HW_PERFORMANCE 1\nuniform vec3      iResolution;\nuniform float     iTime;\nuniform float     iChannelTime[4];\nuniform vec4      iMouse;\nuniform vec4      iDate;\nuniform float     iSampleRate;\nuniform vec3      iChannelResolution[4];\nuniform int       iFrame;\nuniform float     iTimeDelta;\nuniform float     iFrameRate;\nstruct Channel\n{\n    vec3  resolution;\n    float time;\n};\nuniform Channel iChannel[4];\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\nuniform sampler2D iChannel3;\nvoid mainImage( out vec4 c,  in vec2 f );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nout vec4 outColor;\nvoid main( void ){vec4 color = vec4(0.0,0.0,0.0,1.0);mainImage( color, gl_FragCoord.xy );color.w = 1.0;outColor = color;}"}]);